import{b as h,s as f,c as w,d as k}from"./constant-82f1f3fc.js";import{d as p,o,c as l,a,b as n,F as x,k as y,t as L,u as c,l as S,m as v,p as _,g as m,_ as u,e as d,f as C}from"./index-f009abf1.js";const t=s=>(_("data-v-711136ca"),s=s(),m(),s),T={class:"api-caution"},$=v('<h2 class="h2" data-v-711136ca>Constructor</h2><h3 class="h3" data-v-711136ca> WebglTransitions( parent:<a class="param links" data-v-711136ca>ParentDom</a>, transitionList:<a class="param links" data-v-711136ca>any[]</a>, playPicList:<a class="param links" data-v-711136ca>string[] | HTMLImageElement[]</a>, carouselTime?:<a class="param links" data-v-711136ca>number</a>) </h3>',2),I=t(()=>a("a",{class:"links"},"parent",-1)),P=t(()=>a("br",null,null,-1)),M=t(()=>a("a",{class:"links"},"transitionList",-1)),W=t(()=>a("br",null,null,-1)),j={key:0},E=t(()=>a("br",null,null,-1)),N=t(()=>a("a",{class:"links"},"playPicList",-1)),B=t(()=>a("br",null,null,-1)),G=t(()=>a("a",{class:"links"},"carouselTime",-1)),V=t(()=>a("br",null,null,-1)),D=t(()=>a("br",null,null,-1)),H=v('<h2 class="h2" data-v-711136ca>Properties</h2><p data-v-711136ca> See all properties in webgl-transition <a class="links" href="https://github.com/jouvychen/webgl-transition/blob/master/lib/index.ts" target="_blank" data-v-711136ca>index.ts</a></p><div data-v-711136ca><a class="links" data-v-711136ca>.canvas</a>: HTMLCanvasElement.</div><div data-v-711136ca><a class="links" data-v-711136ca>.vsSource</a>: vertex shader source.</div><div data-v-711136ca><a class="links" data-v-711136ca>.fsSource</a>: fragment shader source.</div><div data-v-711136ca><a class="links" data-v-711136ca>.vertexShader</a>: vertex Shader, a WebGLShader.</div><div data-v-711136ca><a class="links" data-v-711136ca>.fragmentShader</a>: fragment Shader, a WebGLShader. </div><div data-v-711136ca><a class="links" data-v-711136ca>.shaderProgram</a>: WebGLProgram;</div><div data-v-711136ca><a class="links" data-v-711136ca>.vertexBuffer</a>: WebGLBuffer;</div><div data-v-711136ca><a class="links" data-v-711136ca>.gl</a>: WebGLRenderingContext;</div><div data-v-711136ca><a class="links" data-v-711136ca>.playPicPreloadList</a>: store preloaded images.</div><div data-v-711136ca><a class="links" data-v-711136ca>.textures</a>: take out 2 images from playPicPreloadList to create textures every times. </div><div data-v-711136ca><a class="links" data-v-711136ca>.stopPlaying</a>: indicates whether the current state is stopped. </div><div data-v-711136ca><a class="links" data-v-711136ca>.assignmentList</a>: set uniform parameters.</div><h2 class="h2" data-v-711136ca>Methods</h2><p data-v-711136ca> See all methods in webgl-transition <a class="links" href="https://github.com/jouvychen/webgl-transition/blob/master/lib/index.ts" target="_blank" data-v-711136ca>index.ts</a></p><h3 class="h3" data-v-711136ca> .<a class="links" data-v-711136ca>main</a> ( ) : <span class="param" data-v-711136ca>undefined</span></h3><p data-v-711136ca>Create webgl content and start the animation.</p><h3 class="h3" data-v-711136ca> .<a class="links" data-v-711136ca>simulatedLostContext</a> () : <span class="param" data-v-711136ca>undefined</span></h3><p data-v-711136ca> Simulate lost webgl context, canvas will catch the webglcontextlost event and restarts main method in few seconds. </p><h3 class="h3" data-v-711136ca> .<a class="links" data-v-711136ca>stop</a> () : <span class="param" data-v-711136ca>undefined</span></h3><p data-v-711136ca>Call clearInterval method but no dispose webgl content.</p><h3 class="h3" data-v-711136ca> .<a class="links" data-v-711136ca>restart</a> () : <span class="param" data-v-711136ca>undefined</span></h3><p data-v-711136ca> Dispose webgl content and recreate a new animation, you can call this method after stop. </p><h2 class="h2" data-v-711136ca>Source</h2><p data-v-711136ca><a href="https://github.com/jouvychen/webgl-transition/blob/master/lib/index.ts" target="_blank" data-v-711136ca>webgl-transition/lib/index.ts</a></p><h2 class="h2" data-v-711136ca>Some tips</h2><p data-v-711136ca> Ⅰ.Since continuous animation requires higher GPU overhead and consumes more resources as the size of the canvas increases, please call the dispose method to free the memory when you no longer need the instance<b title="webglTransitions is the WebglTransitions&#39;s instance" data-v-711136ca>(demo: webglTransitions.dispose())</b>. If you don&#39;t need it for a while, you can call stop first and then restart the animation when you need it again<b title="webglTransitions is the WebglTransitions&#39;s instance" data-v-711136ca>(demo: webglTransitions.stop();webglTransitions.restart())</b>. </p><p data-v-711136ca> Ⅱ.About <b data-v-711136ca>diushijianting</b>, since webgl will lose its context when the system or web page sleeps, define this parameter to control the number of times Webgl-transitions should be re-instantiated. </p>',29),A=p({__name:"api-caution",setup(s){return(g,b)=>(o(),l("div",T,[$,a("p",null,[I,n(" -- parent node informations, expect to pass a HTMLDIVElement which inincludes id, width(Optional), height(Optional)."),P,M,n(" -- a collection of animation names. Built-in animation types:"),W,(o(!0),l(x,null,y(c(h),(i,r)=>(o(),l("a",{key:r},[n(L(i)+" ",1),r!=c(h).length-1?(o(),l("span",j,"、")):S("",!0)]))),128)),E,N,n(" -- allow online images array or HTMLImageElements array"),B,G,n(" -- time between two animations. Unit:ms. Default: 3000."),V,D,n(" Create a new WebglTransition instance. ")]),H]))}});const q=u(A,[["__scopeId","data-v-711136ca"]]),e=s=>(_("data-v-ff185661"),s=s(),m(),s),F={class:"separate-example-code-container"},O=e(()=>a("h3",null,"Api and some tips",-1)),R={class:"code-container"},U=e(()=>a("br",null,null,-1)),z=e(()=>a("br",null,null,-1)),J=e(()=>a("h3",null,"Create a single transition animation",-1)),K=e(()=>a("i",null,"Ⅰ. All pictures from the Internet",-1)),Q={class:"code-container"},X=e(()=>a("i",null,"Ⅱ. Mixed mode, with both local and network images",-1)),Y={class:"code-container"},Z=e(()=>a("br",null,null,-1)),aa=e(()=>a("br",null,null,-1)),ta=e(()=>a("h3",null,"Create transition animations in batches",-1)),ea=e(()=>a("p",{class:"long-text"}," Regarding the image type, it is the same with the requirement to create a single transition animation. Just fill some animation's name to the transitionList, then you'll get multiple types of transition animations. ",-1)),sa={class:"code-container"},na=p({__name:"separate-example-code",setup(s){return(g,b)=>{const i=C("highlightjs");return o(),l("div",F,[O,a("div",R,[d(q)]),U,z,J,K,a("div",Q,[d(i,{class:"highlight",language:"js",code:c(f)},null,8,["code"])]),X,a("div",Y,[d(i,{class:"highlight",language:"js",code:c(w)},null,8,["code"])]),Z,aa,ta,ea,a("div",sa,[d(i,{class:"highlight",language:"js",code:c(k)},null,8,["code"])])])}}});const la=u(na,[["__scopeId","data-v-ff185661"]]);export{la as default};
